/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5570.0, "minX": 0.0, "maxY": 465031.0, "series": [{"data": [[0.0, 5570.0], [0.1, 5570.0], [0.2, 5674.0], [0.3, 5674.0], [0.4, 6122.0], [0.5, 6122.0], [0.6, 6122.0], [0.7, 7187.0], [0.8, 9933.0], [0.9, 9933.0], [1.0, 10205.0], [1.1, 10205.0], [1.2, 11462.0], [1.3, 11462.0], [1.4, 11561.0], [1.5, 11561.0], [1.6, 11803.0], [1.7, 11803.0], [1.8, 12244.0], [1.9, 12244.0], [2.0, 12355.0], [2.1, 12355.0], [2.2, 12718.0], [2.3, 12718.0], [2.4, 12778.0], [2.5, 12778.0], [2.6, 13092.0], [2.7, 13092.0], [2.8, 13092.0], [2.9, 13335.0], [3.0, 13335.0], [3.1, 14011.0], [3.2, 14011.0], [3.3, 14066.0], [3.4, 14066.0], [3.5, 14241.0], [3.6, 14241.0], [3.7, 14241.0], [3.8, 14241.0], [3.9, 14457.0], [4.0, 14457.0], [4.1, 14772.0], [4.2, 14772.0], [4.3, 14901.0], [4.4, 14901.0], [4.5, 15131.0], [4.6, 15131.0], [4.7, 15171.0], [4.8, 15171.0], [4.9, 15529.0], [5.0, 15529.0], [5.1, 15771.0], [5.2, 15771.0], [5.3, 15961.0], [5.4, 15961.0], [5.5, 15970.0], [5.6, 15970.0], [5.7, 16029.0], [5.8, 16029.0], [5.9, 16112.0], [6.0, 16112.0], [6.1, 16215.0], [6.2, 16215.0], [6.3, 16299.0], [6.4, 16299.0], [6.5, 16441.0], [6.6, 16441.0], [6.7, 16768.0], [6.8, 16768.0], [6.9, 16984.0], [7.0, 16984.0], [7.1, 17027.0], [7.2, 17027.0], [7.3, 17372.0], [7.4, 17372.0], [7.5, 17421.0], [7.6, 17421.0], [7.7, 17531.0], [7.8, 17531.0], [7.9, 17577.0], [8.0, 17577.0], [8.1, 17773.0], [8.2, 17773.0], [8.3, 17822.0], [8.4, 17822.0], [8.5, 17893.0], [8.6, 17893.0], [8.7, 17937.0], [8.8, 18058.0], [8.9, 18058.0], [9.0, 18067.0], [9.1, 18067.0], [9.2, 18148.0], [9.3, 18148.0], [9.4, 18227.0], [9.5, 18227.0], [9.6, 18274.0], [9.7, 18274.0], [9.8, 18383.0], [9.9, 18383.0], [10.0, 18418.0], [10.1, 18418.0], [10.2, 18516.0], [10.3, 18516.0], [10.4, 18550.0], [10.5, 18550.0], [10.6, 18814.0], [10.7, 18814.0], [10.8, 18922.0], [10.9, 18922.0], [11.0, 18985.0], [11.1, 18985.0], [11.2, 19043.0], [11.3, 19043.0], [11.4, 19075.0], [11.5, 19075.0], [11.6, 19154.0], [11.7, 19154.0], [11.8, 19209.0], [11.9, 19209.0], [12.0, 19487.0], [12.1, 19487.0], [12.2, 19518.0], [12.3, 19518.0], [12.4, 19764.0], [12.5, 19764.0], [12.6, 19870.0], [12.7, 19870.0], [12.8, 19933.0], [12.9, 19933.0], [13.0, 19968.0], [13.1, 19968.0], [13.2, 20007.0], [13.3, 20007.0], [13.4, 20058.0], [13.5, 20058.0], [13.6, 20068.0], [13.7, 20068.0], [13.8, 20133.0], [13.9, 20133.0], [14.0, 20146.0], [14.1, 20146.0], [14.2, 20200.0], [14.3, 20200.0], [14.4, 20213.0], [14.5, 20213.0], [14.6, 20295.0], [14.7, 20295.0], [14.8, 20393.0], [14.9, 20393.0], [15.0, 20632.0], [15.1, 20632.0], [15.2, 20723.0], [15.3, 20723.0], [15.4, 20918.0], [15.5, 20918.0], [15.6, 21115.0], [15.7, 21115.0], [15.8, 21166.0], [15.9, 21166.0], [16.0, 21196.0], [16.1, 21196.0], [16.2, 21213.0], [16.3, 21213.0], [16.4, 21268.0], [16.5, 21268.0], [16.6, 21370.0], [16.7, 21370.0], [16.8, 21405.0], [16.9, 21405.0], [17.0, 21409.0], [17.1, 21409.0], [17.2, 21440.0], [17.3, 21440.0], [17.4, 21521.0], [17.5, 21521.0], [17.6, 21575.0], [17.7, 21575.0], [17.8, 21621.0], [17.9, 21621.0], [18.0, 21704.0], [18.1, 21704.0], [18.2, 21706.0], [18.3, 21706.0], [18.4, 21721.0], [18.5, 21721.0], [18.6, 21825.0], [18.7, 21825.0], [18.8, 22018.0], [18.9, 22018.0], [19.0, 22064.0], [19.1, 22064.0], [19.2, 22073.0], [19.3, 22073.0], [19.4, 22157.0], [19.5, 22157.0], [19.6, 22200.0], [19.7, 22200.0], [19.8, 22233.0], [19.9, 22233.0], [20.0, 22238.0], [20.1, 22238.0], [20.2, 22247.0], [20.3, 22247.0], [20.4, 22373.0], [20.5, 22373.0], [20.6, 22390.0], [20.7, 22390.0], [20.8, 22406.0], [20.9, 22406.0], [21.0, 22478.0], [21.1, 22478.0], [21.2, 22595.0], [21.3, 22595.0], [21.4, 22805.0], [21.5, 22805.0], [21.6, 22828.0], [21.7, 22828.0], [21.8, 22983.0], [21.9, 22983.0], [22.0, 23111.0], [22.1, 23111.0], [22.2, 23153.0], [22.3, 23153.0], [22.4, 23331.0], [22.5, 23331.0], [22.6, 23397.0], [22.7, 23397.0], [22.8, 23414.0], [22.9, 23414.0], [23.0, 23430.0], [23.1, 23430.0], [23.2, 23516.0], [23.3, 23516.0], [23.4, 23528.0], [23.5, 23528.0], [23.6, 23715.0], [23.7, 23715.0], [23.8, 23721.0], [23.9, 23721.0], [24.0, 23786.0], [24.1, 23786.0], [24.2, 23796.0], [24.3, 23796.0], [24.4, 23911.0], [24.5, 23911.0], [24.6, 23939.0], [24.7, 23939.0], [24.8, 23960.0], [24.9, 23960.0], [25.0, 24324.0], [25.1, 24324.0], [25.2, 24335.0], [25.3, 24335.0], [25.4, 24598.0], [25.5, 24598.0], [25.6, 24624.0], [25.7, 24624.0], [25.8, 24648.0], [25.9, 24648.0], [26.0, 24648.0], [26.1, 24648.0], [26.2, 24725.0], [26.3, 24725.0], [26.4, 24768.0], [26.5, 24768.0], [26.6, 24884.0], [26.7, 24884.0], [26.8, 24909.0], [26.9, 24909.0], [27.0, 24991.0], [27.1, 24991.0], [27.2, 25044.0], [27.3, 25044.0], [27.4, 25073.0], [27.5, 25073.0], [27.6, 25095.0], [27.7, 25095.0], [27.8, 25097.0], [27.9, 25097.0], [28.0, 25173.0], [28.1, 25173.0], [28.2, 25342.0], [28.3, 25342.0], [28.4, 25361.0], [28.5, 25361.0], [28.6, 25570.0], [28.7, 25570.0], [28.8, 25583.0], [28.9, 25583.0], [29.0, 25704.0], [29.1, 25704.0], [29.2, 25719.0], [29.3, 25719.0], [29.4, 25736.0], [29.5, 25736.0], [29.6, 25752.0], [29.7, 25752.0], [29.8, 25854.0], [29.9, 25854.0], [30.0, 26108.0], [30.1, 26108.0], [30.2, 26291.0], [30.3, 26291.0], [30.4, 26331.0], [30.5, 26331.0], [30.6, 26348.0], [30.7, 26348.0], [30.8, 26451.0], [30.9, 26451.0], [31.0, 26534.0], [31.1, 26534.0], [31.2, 26659.0], [31.3, 26659.0], [31.4, 26693.0], [31.5, 26693.0], [31.6, 26724.0], [31.7, 26724.0], [31.8, 26760.0], [31.9, 26760.0], [32.0, 26812.0], [32.1, 26812.0], [32.2, 26823.0], [32.3, 26823.0], [32.4, 26837.0], [32.5, 26837.0], [32.6, 26891.0], [32.7, 26891.0], [32.8, 26941.0], [32.9, 26941.0], [33.0, 26964.0], [33.1, 26964.0], [33.2, 26967.0], [33.3, 26967.0], [33.4, 27006.0], [33.5, 27006.0], [33.6, 27030.0], [33.7, 27030.0], [33.8, 27096.0], [33.9, 27096.0], [34.0, 27190.0], [34.1, 27190.0], [34.2, 27190.0], [34.3, 27190.0], [34.4, 27193.0], [34.5, 27193.0], [34.6, 27341.0], [34.7, 27341.0], [34.8, 27348.0], [34.9, 27348.0], [35.0, 27370.0], [35.1, 27370.0], [35.2, 27372.0], [35.3, 27372.0], [35.4, 27643.0], [35.5, 27643.0], [35.6, 27691.0], [35.7, 27691.0], [35.8, 27713.0], [35.9, 27713.0], [36.0, 27757.0], [36.1, 27757.0], [36.2, 27897.0], [36.3, 27897.0], [36.4, 27943.0], [36.5, 27943.0], [36.6, 27950.0], [36.7, 27950.0], [36.8, 28050.0], [36.9, 28050.0], [37.0, 28097.0], [37.1, 28097.0], [37.2, 28118.0], [37.3, 28118.0], [37.4, 28383.0], [37.5, 28383.0], [37.6, 28544.0], [37.7, 28544.0], [37.8, 28671.0], [37.9, 28671.0], [38.0, 28760.0], [38.1, 28760.0], [38.2, 28761.0], [38.3, 28761.0], [38.4, 28819.0], [38.5, 28819.0], [38.6, 28876.0], [38.7, 28876.0], [38.8, 28876.0], [38.9, 28967.0], [39.0, 28967.0], [39.1, 29139.0], [39.2, 29139.0], [39.3, 29163.0], [39.4, 29163.0], [39.5, 29206.0], [39.6, 29206.0], [39.7, 29233.0], [39.8, 29233.0], [39.9, 29264.0], [40.0, 29264.0], [40.1, 29397.0], [40.2, 29397.0], [40.3, 29407.0], [40.4, 29407.0], [40.5, 29426.0], [40.6, 29426.0], [40.7, 29509.0], [40.8, 29509.0], [40.9, 29513.0], [41.0, 29513.0], [41.1, 29524.0], [41.2, 29524.0], [41.3, 29577.0], [41.4, 29577.0], [41.5, 29638.0], [41.6, 29638.0], [41.7, 29760.0], [41.8, 29760.0], [41.9, 29791.0], [42.0, 29791.0], [42.1, 29831.0], [42.2, 29831.0], [42.3, 29835.0], [42.4, 29835.0], [42.5, 29893.0], [42.6, 29893.0], [42.7, 30042.0], [42.8, 30042.0], [42.9, 30057.0], [43.0, 30057.0], [43.1, 30233.0], [43.2, 30233.0], [43.3, 30503.0], [43.4, 30503.0], [43.5, 30698.0], [43.6, 30698.0], [43.7, 30787.0], [43.8, 30787.0], [43.9, 30900.0], [44.0, 30900.0], [44.1, 30955.0], [44.2, 30955.0], [44.3, 31081.0], [44.4, 31081.0], [44.5, 31258.0], [44.6, 31258.0], [44.7, 31335.0], [44.8, 31335.0], [44.9, 31453.0], [45.0, 31453.0], [45.1, 31627.0], [45.2, 31627.0], [45.3, 31654.0], [45.4, 31654.0], [45.5, 31665.0], [45.6, 31665.0], [45.7, 31729.0], [45.8, 31729.0], [45.9, 31982.0], [46.0, 31982.0], [46.1, 32428.0], [46.2, 32428.0], [46.3, 32580.0], [46.4, 32580.0], [46.5, 32713.0], [46.6, 32713.0], [46.7, 32835.0], [46.8, 32835.0], [46.9, 32868.0], [47.0, 32868.0], [47.1, 32868.0], [47.2, 32868.0], [47.3, 32956.0], [47.4, 32956.0], [47.5, 33052.0], [47.6, 33052.0], [47.7, 33085.0], [47.8, 33085.0], [47.9, 33089.0], [48.0, 33089.0], [48.1, 33290.0], [48.2, 33290.0], [48.3, 33413.0], [48.4, 33413.0], [48.5, 33501.0], [48.6, 33501.0], [48.7, 33556.0], [48.8, 33556.0], [48.9, 33732.0], [49.0, 33732.0], [49.1, 33892.0], [49.2, 33892.0], [49.3, 34041.0], [49.4, 34041.0], [49.5, 34249.0], [49.6, 34249.0], [49.7, 34296.0], [49.8, 34296.0], [49.9, 34324.0], [50.0, 34324.0], [50.1, 34481.0], [50.2, 34481.0], [50.3, 34535.0], [50.4, 34535.0], [50.5, 34635.0], [50.6, 34635.0], [50.7, 34639.0], [50.8, 34639.0], [50.9, 34783.0], [51.0, 34783.0], [51.1, 34873.0], [51.2, 34873.0], [51.3, 34961.0], [51.4, 34961.0], [51.5, 34984.0], [51.6, 34984.0], [51.7, 35023.0], [51.8, 35023.0], [51.9, 35043.0], [52.0, 35043.0], [52.1, 35079.0], [52.2, 35079.0], [52.3, 35085.0], [52.4, 35085.0], [52.5, 35088.0], [52.6, 35088.0], [52.7, 35238.0], [52.8, 35238.0], [52.9, 35475.0], [53.0, 35475.0], [53.1, 35562.0], [53.2, 35562.0], [53.3, 35596.0], [53.4, 35596.0], [53.5, 35873.0], [53.6, 35873.0], [53.7, 35923.0], [53.8, 35923.0], [53.9, 36007.0], [54.0, 36007.0], [54.1, 36216.0], [54.2, 36216.0], [54.3, 36226.0], [54.4, 36226.0], [54.5, 36310.0], [54.6, 36310.0], [54.7, 36517.0], [54.8, 36517.0], [54.9, 36583.0], [55.0, 36583.0], [55.1, 36628.0], [55.2, 36628.0], [55.3, 36801.0], [55.4, 36801.0], [55.5, 37139.0], [55.6, 37139.0], [55.7, 37235.0], [55.8, 37235.0], [55.9, 37241.0], [56.0, 37241.0], [56.1, 37258.0], [56.2, 37258.0], [56.3, 37845.0], [56.4, 37845.0], [56.5, 38120.0], [56.6, 38120.0], [56.7, 38204.0], [56.8, 38204.0], [56.9, 38216.0], [57.0, 38216.0], [57.1, 38271.0], [57.2, 38271.0], [57.3, 38573.0], [57.4, 38573.0], [57.5, 38616.0], [57.6, 38616.0], [57.7, 38617.0], [57.8, 38617.0], [57.9, 38649.0], [58.0, 38649.0], [58.1, 38795.0], [58.2, 38795.0], [58.3, 38853.0], [58.4, 38853.0], [58.5, 39018.0], [58.6, 39018.0], [58.7, 39048.0], [58.8, 39048.0], [58.9, 39246.0], [59.0, 39246.0], [59.1, 39348.0], [59.2, 39348.0], [59.3, 39556.0], [59.4, 39556.0], [59.5, 39564.0], [59.6, 39564.0], [59.7, 39787.0], [59.8, 39787.0], [59.9, 39827.0], [60.0, 39827.0], [60.1, 39851.0], [60.2, 39851.0], [60.3, 40020.0], [60.4, 40020.0], [60.5, 40542.0], [60.6, 40542.0], [60.7, 40861.0], [60.8, 40861.0], [60.9, 41575.0], [61.0, 41575.0], [61.1, 41704.0], [61.2, 41704.0], [61.3, 41785.0], [61.4, 41785.0], [61.5, 41863.0], [61.6, 41863.0], [61.7, 42159.0], [61.8, 42159.0], [61.9, 42499.0], [62.0, 42499.0], [62.1, 42782.0], [62.2, 42782.0], [62.3, 43141.0], [62.4, 43141.0], [62.5, 43190.0], [62.6, 43190.0], [62.7, 43327.0], [62.8, 43327.0], [62.9, 43364.0], [63.0, 43364.0], [63.1, 44196.0], [63.2, 44196.0], [63.3, 44401.0], [63.4, 44401.0], [63.5, 44566.0], [63.6, 44566.0], [63.7, 44601.0], [63.8, 44601.0], [63.9, 44795.0], [64.0, 44795.0], [64.1, 45135.0], [64.2, 45135.0], [64.3, 45229.0], [64.4, 45229.0], [64.5, 45266.0], [64.6, 45266.0], [64.7, 45272.0], [64.8, 45272.0], [64.9, 45293.0], [65.0, 45293.0], [65.1, 45811.0], [65.2, 45811.0], [65.3, 45830.0], [65.4, 45830.0], [65.5, 46368.0], [65.6, 46368.0], [65.7, 47212.0], [65.8, 47212.0], [65.9, 47506.0], [66.0, 47506.0], [66.1, 47630.0], [66.2, 47630.0], [66.3, 47707.0], [66.4, 47707.0], [66.5, 47886.0], [66.6, 47886.0], [66.7, 48120.0], [66.8, 48120.0], [66.9, 48140.0], [67.0, 48140.0], [67.1, 48263.0], [67.2, 48263.0], [67.3, 48273.0], [67.4, 48273.0], [67.5, 48380.0], [67.6, 48380.0], [67.7, 48399.0], [67.8, 48399.0], [67.9, 48898.0], [68.0, 48898.0], [68.1, 49097.0], [68.2, 49097.0], [68.3, 49138.0], [68.4, 49138.0], [68.5, 49736.0], [68.6, 49736.0], [68.7, 49800.0], [68.8, 49800.0], [68.9, 50180.0], [69.0, 50180.0], [69.1, 50257.0], [69.2, 50257.0], [69.3, 50353.0], [69.4, 50353.0], [69.5, 50718.0], [69.6, 50718.0], [69.7, 51065.0], [69.8, 51065.0], [69.9, 51178.0], [70.0, 51178.0], [70.1, 51973.0], [70.2, 51973.0], [70.3, 52527.0], [70.4, 52527.0], [70.5, 52596.0], [70.6, 52596.0], [70.7, 52619.0], [70.8, 52619.0], [70.9, 52749.0], [71.0, 52749.0], [71.1, 53059.0], [71.2, 53059.0], [71.3, 53099.0], [71.4, 53099.0], [71.5, 53969.0], [71.6, 53969.0], [71.7, 54240.0], [71.8, 54240.0], [71.9, 54587.0], [72.0, 54587.0], [72.1, 54601.0], [72.2, 54601.0], [72.3, 54683.0], [72.4, 54683.0], [72.5, 54867.0], [72.6, 54867.0], [72.7, 55043.0], [72.8, 55043.0], [72.9, 55539.0], [73.0, 55539.0], [73.1, 56067.0], [73.2, 56067.0], [73.3, 56435.0], [73.4, 56435.0], [73.5, 56977.0], [73.6, 56977.0], [73.7, 57421.0], [73.8, 57421.0], [73.9, 58407.0], [74.0, 58407.0], [74.1, 59243.0], [74.2, 59243.0], [74.3, 61613.0], [74.4, 61613.0], [74.5, 62036.0], [74.6, 62036.0], [74.7, 62305.0], [74.8, 62305.0], [74.9, 63404.0], [75.0, 63404.0], [75.1, 63498.0], [75.2, 63498.0], [75.3, 64411.0], [75.4, 64411.0], [75.5, 64411.0], [75.6, 64411.0], [75.7, 64916.0], [75.8, 64916.0], [75.9, 65103.0], [76.0, 65103.0], [76.1, 65157.0], [76.2, 65157.0], [76.3, 66267.0], [76.4, 66267.0], [76.5, 67974.0], [76.6, 67974.0], [76.7, 68026.0], [76.8, 68026.0], [76.9, 68623.0], [77.0, 68623.0], [77.1, 69632.0], [77.2, 69632.0], [77.3, 71016.0], [77.4, 71016.0], [77.5, 71036.0], [77.6, 71036.0], [77.7, 71262.0], [77.8, 71262.0], [77.9, 72730.0], [78.0, 72730.0], [78.1, 72873.0], [78.2, 72873.0], [78.3, 73283.0], [78.4, 73283.0], [78.5, 73311.0], [78.6, 73311.0], [78.7, 73815.0], [78.8, 73815.0], [78.9, 75842.0], [79.0, 75842.0], [79.1, 76177.0], [79.2, 76177.0], [79.3, 76487.0], [79.4, 76487.0], [79.5, 76847.0], [79.6, 76847.0], [79.7, 77511.0], [79.8, 77511.0], [79.9, 77856.0], [80.0, 77856.0], [80.1, 78939.0], [80.2, 78939.0], [80.3, 79762.0], [80.4, 79762.0], [80.5, 80573.0], [80.6, 80573.0], [80.7, 81078.0], [80.8, 81078.0], [80.9, 81086.0], [81.0, 81086.0], [81.1, 82656.0], [81.2, 82656.0], [81.3, 83645.0], [81.4, 83645.0], [81.5, 85280.0], [81.6, 85280.0], [81.7, 89952.0], [81.8, 89952.0], [81.9, 90543.0], [82.0, 90543.0], [82.1, 92845.0], [82.2, 92845.0], [82.3, 93946.0], [82.4, 93946.0], [82.5, 94931.0], [82.6, 94931.0], [82.7, 98507.0], [82.8, 98507.0], [82.9, 99441.0], [83.0, 99441.0], [83.1, 102085.0], [83.2, 102085.0], [83.3, 104005.0], [83.4, 104005.0], [83.5, 104404.0], [83.6, 104404.0], [83.7, 110041.0], [83.8, 110041.0], [83.9, 110636.0], [84.0, 110636.0], [84.1, 112098.0], [84.2, 112098.0], [84.3, 114032.0], [84.4, 114032.0], [84.5, 115130.0], [84.6, 115130.0], [84.7, 115269.0], [84.8, 115269.0], [84.9, 117786.0], [85.0, 117786.0], [85.1, 119048.0], [85.2, 119048.0], [85.3, 119631.0], [85.4, 119631.0], [85.5, 119840.0], [85.6, 119840.0], [85.7, 121053.0], [85.8, 121053.0], [85.9, 122012.0], [86.0, 122012.0], [86.1, 124365.0], [86.2, 124365.0], [86.3, 126125.0], [86.4, 126125.0], [86.5, 126553.0], [86.6, 126553.0], [86.7, 134836.0], [86.8, 134836.0], [86.9, 135654.0], [87.0, 135654.0], [87.1, 137006.0], [87.2, 137006.0], [87.3, 144099.0], [87.4, 144099.0], [87.5, 157420.0], [87.6, 157420.0], [87.7, 158328.0], [87.8, 158328.0], [87.9, 165578.0], [88.0, 165578.0], [88.1, 167405.0], [88.2, 167405.0], [88.3, 189072.0], [88.4, 189072.0], [88.5, 207212.0], [88.6, 207212.0], [88.7, 207285.0], [88.8, 207285.0], [88.9, 209485.0], [89.0, 209485.0], [89.1, 222201.0], [89.2, 222201.0], [89.3, 222546.0], [89.4, 222546.0], [89.5, 223661.0], [89.6, 223661.0], [89.7, 225242.0], [89.8, 225242.0], [89.9, 225374.0], [90.0, 225374.0], [90.1, 225424.0], [90.2, 225424.0], [90.3, 225613.0], [90.4, 225613.0], [90.5, 227471.0], [90.6, 227471.0], [90.7, 227545.0], [90.8, 227545.0], [90.9, 229049.0], [91.0, 229049.0], [91.1, 229137.0], [91.2, 229137.0], [91.3, 230210.0], [91.4, 230210.0], [91.5, 231564.0], [91.6, 231564.0], [91.7, 232084.0], [91.8, 232084.0], [91.9, 232088.0], [92.0, 232088.0], [92.1, 232255.0], [92.2, 232255.0], [92.3, 234105.0], [92.4, 234105.0], [92.5, 234299.0], [92.6, 234299.0], [92.7, 234475.0], [92.8, 234475.0], [92.9, 234480.0], [93.0, 234480.0], [93.1, 234923.0], [93.2, 234923.0], [93.3, 235647.0], [93.4, 235647.0], [93.5, 237890.0], [93.6, 237890.0], [93.7, 240410.0], [93.8, 240410.0], [93.9, 240891.0], [94.0, 240891.0], [94.1, 240958.0], [94.2, 240958.0], [94.3, 243030.0], [94.4, 243030.0], [94.5, 246065.0], [94.6, 246065.0], [94.7, 246543.0], [94.8, 246543.0], [94.9, 248247.0], [95.0, 248247.0], [95.1, 261860.0], [95.2, 261860.0], [95.3, 262578.0], [95.4, 262578.0], [95.5, 262882.0], [95.6, 262882.0], [95.7, 269453.0], [95.8, 269453.0], [95.9, 269508.0], [96.0, 269508.0], [96.1, 273106.0], [96.2, 273106.0], [96.3, 283158.0], [96.4, 283158.0], [96.5, 300278.0], [96.6, 300278.0], [96.7, 353206.0], [96.8, 353206.0], [96.9, 370510.0], [97.0, 370510.0], [97.1, 390239.0], [97.2, 390239.0], [97.3, 450099.0], [97.4, 450099.0], [97.5, 450287.0], [97.6, 450287.0], [97.7, 450366.0], [97.8, 450366.0], [97.9, 450395.0], [98.0, 450395.0], [98.1, 450920.0], [98.2, 450920.0], [98.3, 451668.0], [98.4, 451668.0], [98.5, 454490.0], [98.6, 454490.0], [98.7, 458109.0], [98.8, 458109.0], [98.9, 459743.0], [99.0, 459743.0], [99.1, 459806.0], [99.2, 459806.0], [99.3, 460337.0], [99.4, 460337.0], [99.5, 461655.0], [99.6, 461655.0], [99.7, 462628.0], [99.8, 462628.0], [99.9, 465031.0], [100.0, 465031.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 5500.0, "maxY": 5.0, "series": [{"data": [[370500.0, 1.0], [207200.0, 2.0], [234400.0, 2.0], [240800.0, 1.0], [273100.0, 1.0], [222500.0, 1.0], [246500.0, 1.0], [89900.0, 1.0], [93900.0, 1.0], [124300.0, 1.0], [137000.0, 1.0], [167400.0, 1.0], [450900.0, 1.0], [237800.0, 1.0], [261800.0, 1.0], [450000.0, 1.0], [33700.0, 1.0], [32900.0, 1.0], [34500.0, 1.0], [36500.0, 2.0], [34900.0, 2.0], [283100.0, 1.0], [38500.0, 1.0], [38100.0, 1.0], [40500.0, 1.0], [39700.0, 1.0], [39300.0, 1.0], [41700.0, 2.0], [42100.0, 1.0], [44100.0, 1.0], [43300.0, 2.0], [44500.0, 1.0], [47700.0, 1.0], [48100.0, 2.0], [50100.0, 1.0], [49700.0, 1.0], [52500.0, 2.0], [54500.0, 1.0], [56900.0, 1.0], [229100.0, 1.0], [227500.0, 1.0], [64900.0, 1.0], [269400.0, 1.0], [77800.0, 1.0], [73800.0, 1.0], [81000.0, 2.0], [82600.0, 1.0], [99400.0, 1.0], [110600.0, 1.0], [121000.0, 1.0], [135600.0, 1.0], [262500.0, 1.0], [223600.0, 1.0], [225200.0, 1.0], [246000.0, 1.0], [234100.0, 1.0], [76100.0, 1.0], [5600.0, 1.0], [5500.0, 1.0], [90500.0, 1.0], [6100.0, 1.0], [98500.0, 1.0], [7100.0, 1.0], [117700.0, 1.0], [465000.0, 1.0], [126500.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [11400.0, 1.0], [11500.0, 1.0], [11800.0, 1.0], [12200.0, 1.0], [12300.0, 1.0], [12700.0, 2.0], [209400.0, 1.0], [13000.0, 1.0], [13300.0, 1.0], [225400.0, 1.0], [222200.0, 1.0], [458100.0, 1.0], [14200.0, 2.0], [14000.0, 2.0], [230200.0, 1.0], [14400.0, 1.0], [14700.0, 1.0], [15100.0, 2.0], [243000.0, 1.0], [14900.0, 1.0], [15700.0, 1.0], [15500.0, 1.0], [16200.0, 2.0], [15900.0, 2.0], [16100.0, 1.0], [16000.0, 1.0], [17000.0, 1.0], [17400.0, 1.0], [16400.0, 1.0], [17800.0, 2.0], [18400.0, 1.0], [18200.0, 2.0], [18000.0, 2.0], [19000.0, 2.0], [19400.0, 1.0], [18800.0, 1.0], [19200.0, 1.0], [19800.0, 1.0], [20000.0, 3.0], [20200.0, 3.0], [20600.0, 1.0], [21200.0, 2.0], [21400.0, 3.0], [22400.0, 2.0], [22200.0, 4.0], [21600.0, 1.0], [21800.0, 1.0], [22000.0, 3.0], [23400.0, 2.0], [22800.0, 2.0], [24600.0, 3.0], [25000.0, 4.0], [24800.0, 1.0], [25800.0, 1.0], [26600.0, 2.0], [26400.0, 1.0], [26200.0, 1.0], [27000.0, 3.0], [26800.0, 4.0], [27600.0, 2.0], [28000.0, 2.0], [28600.0, 1.0], [27800.0, 1.0], [29400.0, 2.0], [29200.0, 3.0], [28800.0, 2.0], [29600.0, 1.0], [30600.0, 1.0], [29800.0, 3.0], [30000.0, 2.0], [30200.0, 1.0], [31000.0, 1.0], [31200.0, 1.0], [31600.0, 3.0], [31400.0, 1.0], [32400.0, 1.0], [32800.0, 3.0], [34000.0, 1.0], [33200.0, 1.0], [34400.0, 1.0], [34800.0, 1.0], [36000.0, 1.0], [35200.0, 1.0], [36800.0, 1.0], [37200.0, 3.0], [38800.0, 1.0], [40000.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [42400.0, 1.0], [165500.0, 1.0], [44400.0, 1.0], [45200.0, 4.0], [47200.0, 1.0], [48800.0, 1.0], [47600.0, 1.0], [54800.0, 1.0], [56400.0, 1.0], [56000.0, 1.0], [450300.0, 2.0], [58400.0, 1.0], [59200.0, 1.0], [61600.0, 1.0], [62000.0, 1.0], [64400.0, 2.0], [69600.0, 1.0], [68000.0, 1.0], [71200.0, 1.0], [72800.0, 1.0], [76800.0, 1.0], [92800.0, 1.0], [104000.0, 1.0], [112000.0, 1.0], [115200.0, 1.0], [144000.0, 1.0], [225600.0, 1.0], [232000.0, 2.0], [454400.0, 1.0], [460300.0, 1.0], [240900.0, 1.0], [67900.0, 1.0], [72700.0, 1.0], [77500.0, 1.0], [115100.0, 1.0], [462600.0, 1.0], [189000.0, 1.0], [229000.0, 1.0], [227400.0, 1.0], [232200.0, 1.0], [248200.0, 1.0], [262800.0, 1.0], [451600.0, 1.0], [34700.0, 1.0], [33500.0, 2.0], [34300.0, 1.0], [35900.0, 1.0], [35500.0, 2.0], [36300.0, 1.0], [37100.0, 1.0], [38700.0, 1.0], [39500.0, 2.0], [42700.0, 1.0], [41500.0, 1.0], [43100.0, 2.0], [44700.0, 1.0], [46300.0, 1.0], [45100.0, 1.0], [47500.0, 1.0], [48300.0, 2.0], [49100.0, 1.0], [50300.0, 1.0], [51100.0, 1.0], [50700.0, 1.0], [51900.0, 1.0], [52700.0, 1.0], [53900.0, 1.0], [55500.0, 1.0], [231500.0, 1.0], [62300.0, 1.0], [65100.0, 2.0], [66200.0, 1.0], [68600.0, 1.0], [71000.0, 2.0], [75800.0, 1.0], [450200.0, 1.0], [459800.0, 1.0], [119800.0, 1.0], [119000.0, 1.0], [134800.0, 1.0], [235600.0, 1.0], [240400.0, 1.0], [461600.0, 1.0], [225300.0, 1.0], [234900.0, 1.0], [73300.0, 1.0], [300200.0, 1.0], [78900.0, 1.0], [79700.0, 1.0], [80500.0, 1.0], [94900.0, 1.0], [126100.0, 1.0], [157400.0, 1.0], [459700.0, 1.0], [234200.0, 1.0], [17300.0, 1.0], [16700.0, 1.0], [16900.0, 1.0], [17700.0, 1.0], [18300.0, 1.0], [17900.0, 1.0], [17500.0, 2.0], [18100.0, 1.0], [18500.0, 2.0], [19100.0, 1.0], [18900.0, 2.0], [20300.0, 1.0], [20100.0, 2.0], [19900.0, 2.0], [19700.0, 1.0], [19500.0, 1.0], [20900.0, 1.0], [21100.0, 3.0], [20700.0, 1.0], [21500.0, 2.0], [21300.0, 1.0], [21700.0, 3.0], [22500.0, 1.0], [22100.0, 1.0], [22300.0, 2.0], [353200.0, 1.0], [23500.0, 2.0], [23100.0, 2.0], [22900.0, 1.0], [23300.0, 2.0], [23900.0, 3.0], [23700.0, 4.0], [24300.0, 2.0], [24500.0, 1.0], [25300.0, 2.0], [24700.0, 2.0], [25500.0, 2.0], [24900.0, 2.0], [25100.0, 1.0], [25700.0, 4.0], [26300.0, 2.0], [26500.0, 1.0], [26100.0, 1.0], [26700.0, 2.0], [26900.0, 3.0], [27100.0, 3.0], [27300.0, 4.0], [27700.0, 2.0], [28300.0, 1.0], [27900.0, 2.0], [28100.0, 1.0], [28500.0, 1.0], [29500.0, 4.0], [28700.0, 2.0], [29100.0, 2.0], [28900.0, 1.0], [29300.0, 1.0], [30500.0, 1.0], [29700.0, 2.0], [30700.0, 1.0], [30900.0, 2.0], [31700.0, 1.0], [31300.0, 1.0], [31900.0, 1.0], [32700.0, 1.0], [32500.0, 1.0], [34200.0, 2.0], [34600.0, 2.0], [33000.0, 3.0], [33400.0, 1.0], [33800.0, 1.0], [269500.0, 1.0], [35800.0, 1.0], [35000.0, 5.0], [35400.0, 1.0], [36200.0, 2.0], [36600.0, 1.0], [38200.0, 3.0], [38600.0, 3.0], [37800.0, 1.0], [39000.0, 2.0], [39800.0, 2.0], [158300.0, 1.0], [41800.0, 1.0], [44600.0, 1.0], [45800.0, 2.0], [49000.0, 1.0], [48200.0, 2.0], [47800.0, 1.0], [50200.0, 1.0], [49800.0, 1.0], [51000.0, 1.0], [52600.0, 1.0], [53000.0, 2.0], [54200.0, 1.0], [54600.0, 2.0], [55000.0, 1.0], [57400.0, 1.0], [63400.0, 2.0], [73200.0, 1.0], [76400.0, 1.0], [85200.0, 1.0], [83600.0, 1.0], [390200.0, 1.0], [102000.0, 1.0], [104400.0, 1.0], [110000.0, 1.0], [114000.0, 1.0], [119600.0, 1.0], [122000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 465000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.300000000000002, "minX": 1.71410316E12, "maxY": 100.0, "series": [{"data": [[1.71410322E12, 99.29523809523812], [1.71410358E12, 37.38541666666666], [1.71410328E12, 85.7029702970297], [1.71410316E12, 100.0], [1.71410364E12, 14.300000000000002], [1.71410334E12, 65.13559322033896]], "isOverall": false, "label": "Pefomense Test", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71410364E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5898.0, "minX": 1.0, "maxY": 370621.0, "series": [{"data": [[2.0, 5898.0], [3.0, 13335.0], [4.0, 11561.0], [5.0, 7187.0], [6.0, 11462.0], [7.0, 15575.0], [8.0, 49408.0], [9.0, 16029.0], [10.0, 18274.0], [11.0, 14241.0], [12.0, 17585.0], [13.0, 27800.0], [14.0, 16630.666666666668], [15.0, 13839.5], [16.0, 14011.0], [17.0, 14615.666666666666], [18.0, 25579.0], [19.0, 16768.0], [20.0, 25637.384615384613], [21.0, 30900.0], [22.0, 20538.8], [23.0, 19964.666666666668], [24.0, 21793.90909090909], [25.0, 15970.0], [26.0, 23331.0], [27.0, 24094.5], [28.0, 27950.666666666668], [29.0, 26348.0], [30.0, 17953.0], [31.0, 22247.0], [33.0, 196264.0], [32.0, 246543.0], [35.0, 92718.77777777778], [34.0, 17893.0], [37.0, 370621.0], [36.0, 347356.0], [39.0, 306472.0], [41.0, 252194.66666666666], [40.0, 363781.0], [43.0, 232255.0], [42.0, 225424.0], [45.0, 314431.6666666667], [44.0, 282042.0], [46.0, 269508.0], [49.0, 310668.6666666666], [48.0, 251920.0], [51.0, 246613.33333333334], [50.0, 309061.25], [52.0, 312357.0], [55.0, 138801.0], [54.0, 304060.0], [57.0, 31112.75], [56.0, 29622.0], [59.0, 35054.0], [58.0, 46170.0], [61.0, 32844.6], [60.0, 24598.0], [63.0, 34324.0], [62.0, 40024.25], [67.0, 76089.0], [66.0, 54683.0], [65.0, 32273.0], [64.0, 30779.0], [71.0, 122565.0], [70.0, 91816.28571428572], [69.0, 68026.0], [68.0, 36454.5], [75.0, 72082.0], [74.0, 54805.0], [73.0, 34984.0], [72.0, 88617.33333333333], [79.0, 59742.555555555555], [78.0, 31797.5], [77.0, 35596.0], [76.0, 47088.8], [83.0, 43898.0], [82.0, 48539.72727272728], [81.0, 43659.0], [80.0, 29163.0], [87.0, 63833.181818181816], [86.0, 38855.5], [85.0, 57857.5], [84.0, 30248.5], [91.0, 50319.0], [90.0, 61014.333333333336], [89.0, 36208.0], [88.0, 42065.0], [95.0, 59684.0], [94.0, 71399.6], [93.0, 40209.72727272727], [92.0, 54267.4], [99.0, 63691.545454545456], [98.0, 65603.14285714286], [97.0, 37292.5], [96.0, 39363.0], [100.0, 40509.226993865], [1.0, 7887.5]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[72.25800000000011, 70638.14599999995]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 107.5, "minX": 1.71410316E12, "maxY": 641567.0333333333, "series": [{"data": [[1.71410322E12, 641567.0333333333], [1.71410358E12, 586575.8833333333], [1.71410328E12, 617125.4333333333], [1.71410316E12, 543805.0833333334], [1.71410364E12, 305508.13333333336], [1.71410334E12, 360499.43333333335]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.71410322E12, 225.75], [1.71410358E12, 206.4], [1.71410328E12, 217.15], [1.71410316E12, 191.35], [1.71410364E12, 107.5], [1.71410334E12, 126.85]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71410364E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 20259.49999999999, "minX": 1.71410316E12, "maxY": 182812.08333333328, "series": [{"data": [[1.71410322E12, 50453.64761904761], [1.71410358E12, 182812.08333333328], [1.71410328E12, 50815.29702970296], [1.71410316E12, 35532.93258426966], [1.71410364E12, 20259.49999999999], [1.71410334E12, 53622.52542372881]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71410364E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2287.6, "minX": 1.71410316E12, "maxY": 20039.427083333343, "series": [{"data": [[1.71410322E12, 3850.3047619047625], [1.71410358E12, 20039.427083333343], [1.71410328E12, 3611.5247524752467], [1.71410316E12, 3377.2134831460676], [1.71410364E12, 2287.6], [1.71410334E12, 6273.271186440676]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71410364E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 108.58, "minX": 1.71410316E12, "maxY": 4402.229166666663, "series": [{"data": [[1.71410322E12, 487.60952380952386], [1.71410358E12, 4402.229166666663], [1.71410328E12, 1016.0099009900993], [1.71410316E12, 243.26966292134838], [1.71410364E12, 108.58], [1.71410334E12, 743.6949152542375]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71410364E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5570.0, "minX": 1.71410316E12, "maxY": 465031.0, "series": [{"data": [[1.71410322E12, 137006.0], [1.71410358E12, 465031.0], [1.71410328E12, 189072.0], [1.71410316E12, 76847.0], [1.71410364E12, 83645.0], [1.71410334E12, 209485.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.71410322E12, 112871.6], [1.71410358E12, 451144.4], [1.71410328E12, 80370.99999999999], [1.71410316E12, 64916.0], [1.71410364E12, 30761.3], [1.71410334E12, 124365.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.71410322E12, 136924.88], [1.71410358E12, 465031.0], [1.71410328E12, 188638.6600000001], [1.71410316E12, 76847.0], [1.71410364E12, 83645.0], [1.71410334E12, 209485.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.71410322E12, 121724.29999999999], [1.71410358E12, 459885.65], [1.71410328E12, 141673.0999999998], [1.71410316E12, 72173.5], [1.71410364E12, 47898.149999999914], [1.71410334E12, 207212.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.71410322E12, 18418.0], [1.71410358E12, 11803.0], [1.71410328E12, 21721.0], [1.71410316E12, 15131.0], [1.71410364E12, 5570.0], [1.71410334E12, 18383.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.71410322E12, 35923.0], [1.71410358E12, 226542.0], [1.71410328E12, 39827.0], [1.71410316E12, 28050.0], [1.71410364E12, 17521.0], [1.71410334E12, 37845.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71410364E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19832.0, "minX": 1.0, "maxY": 248247.0, "series": [{"data": [[1.0, 31079.0], [4.0, 40765.5], [2.0, 30934.0], [5.0, 42782.0], [3.0, 33184.5], [6.0, 19832.0], [29.0, 248247.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1822.0, "minX": 1.0, "maxY": 2653.0, "series": [{"data": [[1.0, 1822.0], [4.0, 2380.5], [2.0, 2129.5], [5.0, 2079.0], [3.0, 2099.5], [6.0, 2349.5], [29.0, 2653.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 29.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.7141031E12, "maxY": 1.6666666666666667, "series": [{"data": [[1.71410322E12, 1.6666666666666667], [1.7141031E12, 1.6666666666666667], [1.71410358E12, 1.05], [1.71410328E12, 1.3333333333333333], [1.71410316E12, 1.4833333333333334], [1.71410364E12, 0.4666666666666667], [1.71410334E12, 0.6666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71410364E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.71410316E12, "maxY": 1.75, "series": [{"data": [[1.71410322E12, 1.75], [1.71410358E12, 1.6], [1.71410328E12, 1.6833333333333333], [1.71410316E12, 1.4833333333333334], [1.71410364E12, 0.8333333333333334], [1.71410334E12, 0.9833333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.71410364E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.71410316E12, "maxY": 1.75, "series": [{"data": [[1.71410322E12, 1.75], [1.71410358E12, 1.6], [1.71410328E12, 1.6833333333333333], [1.71410316E12, 1.4833333333333334], [1.71410364E12, 0.8333333333333334], [1.71410334E12, 0.9833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71410364E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8333333333333334, "minX": 1.71410316E12, "maxY": 1.75, "series": [{"data": [[1.71410322E12, 1.75], [1.71410358E12, 1.6], [1.71410328E12, 1.6833333333333333], [1.71410316E12, 1.4833333333333334], [1.71410364E12, 0.8333333333333334], [1.71410334E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.71410364E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

